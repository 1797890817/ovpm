// Code generated by go-bindata.
// sources:
// template/ccd.file.tmpl
// template/client.ovpn.tmpl
// template/dh4096.pem.tmpl
// template/iptables.tmpl
// template/server.conf.tmpl
// DO NOT EDIT!

package ovpm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCcdFileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x4b\xce\xcf\x4b\xcb\x4c\xd7\x2d\x28\x2d\xce\x50\xa8\xae\x56\xd0\xf3\x0c\x50\xa8\xad\x05\xb3\xfc\x52\x4b\x7c\x13\x8b\xb3\x15\x6a\x6b\xb9\x94\x33\x8b\xf2\x4b\x4b\x52\x15\x0c\x2d\x8d\xf4\x0c\xcd\x2c\xf4\x2c\x0d\xf4\x0c\x14\x8c\x4c\x4d\xf5\x60\xd8\x80\x0b\x10\x00\x00\xff\xff\xb7\x2b\x33\x90\x4a\x00\x00\x00")

func templateCcdFileTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCcdFileTmpl,
		"template/ccd.file.tmpl",
	)
}

func templateCcdFileTmpl() (*asset, error) {
	bytes, err := templateCcdFileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/ccd.file.tmpl", size: 74, mode: os.FileMode(420), modTime: time.Unix(1500620674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateClientOvpnTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x31\x4b\x3c\x31\x10\x47\xfb\xf9\x14\x03\xff\xe6\x6f\xb1\x97\xc2\x4e\x16\x41\x6c\x04\x11\xaf\xb2\x11\x8b\x6c\x76\xee\x76\xb8\x24\x13\x92\xd9\x40\x3c\xf2\xdd\x65\xf7\xc4\x6e\x7e\xef\xc1\xbc\x7f\xa8\x0b\x17\x94\x9a\x22\x9e\xd8\x13\x72\x41\xbb\xaa\x04\xab\xec\xac\xf7\x0d\xcf\x14\x29\x5b\xa5\x19\xa7\x86\x9f\xef\x1f\xc7\xb7\xaf\xff\x8b\x6a\x2a\x0f\xc6\x9c\x59\x97\x75\x3a\x38\x09\xc6\xd9\xd9\x48\x4d\xe1\x0e\xc0\x79\xa6\xa8\x30\x53\x45\x5d\x23\xa4\x2c\x2a\xb8\xce\x09\x32\x05\x51\xc2\xeb\x15\x0f\x2f\x52\x34\xda\x40\xd8\xfb\xbe\x8f\x92\x15\x7b\x87\x4c\x45\x7c\x1d\x32\x69\x6e\xc8\xf1\xc4\x91\x95\x20\xca\xc4\x71\x86\x44\xb9\x70\xd1\xe1\x42\xed\xef\xde\x0a\x4e\x42\x1a\xfc\xb7\x40\xa5\x3c\xe1\x3d\xc0\xe8\xec\x23\x6c\x6f\x9f\x9f\xb0\xf7\xd1\x6c\x13\x46\x47\x59\x7f\x31\xed\xb5\xd1\xdc\x10\x8c\x17\x6a\x37\xf3\x4a\x6d\x17\x3b\xf8\x09\x00\x00\xff\xff\x1a\xff\x84\x50\x1d\x01\x00\x00")

func templateClientOvpnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateClientOvpnTmpl,
		"template/client.ovpn.tmpl",
	)
}

func templateClientOvpnTmpl() (*asset, error) {
	bytes, err := templateClientOvpnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/client.ovpn.tmpl", size: 285, mode: os.FileMode(420), modTime: time.Unix(1500620674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDh4096PemTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd4\x35\x12\xa4\x08\x00\x40\xd1\x9c\x53\x4c\x4e\x6d\xe1\x16\xe2\xee\xde\x19\xd0\x38\x8d\xfb\xe9\xb7\x76\xe2\xfd\xe1\x3f\xc0\xfb\xe7\xbf\x38\x51\x56\xad\x3f\x82\xf2\xc7\x61\x3d\xd6\x14\x03\xd1\xf3\xff\x7e\xc0\x54\x55\x51\x70\x75\x9e\xad\x45\xb6\x2f\xb3\xc9\xd2\xe7\x37\x56\x43\x1c\xa4\x1b\x2d\xac\xa4\x52\xd1\xb4\xbe\xa5\x86\xf7\xd6\x99\x21\xd2\xde\x29\x40\x6c\xec\xf4\x04\x64\x3e\x11\x13\xee\x7e\x38\xf0\xc5\x28\x74\x5d\xa8\x62\x55\x98\x61\x1a\xea\x16\x8e\x9e\xaf\x9b\xd5\x15\x48\x63\x88\xf6\xd1\xa8\x1f\x03\x39\x69\x95\x7a\x63\x88\xe6\x15\x81\x75\xb8\x4a\xdb\x34\x5f\x4b\x1c\xdf\xc5\x06\x57\x17\xc0\xf7\x75\x64\x4a\xc5\x2d\x99\x2d\x90\x54\x89\x30\x0f\x94\x8f\x86\xce\xa5\xda\x3e\x8b\xaa\x8d\x2f\x7c\x14\x4d\xab\xeb\x97\x43\x29\x3e\xd4\xd9\x9e\x62\xf5\x10\x0d\x6a\xcb\xbf\x7c\x5f\xfa\xb5\x77\x01\x52\x8d\x90\x43\x92\xb3\xfa\x3a\xdd\x57\xdd\x33\x6c\xbb\x15\x03\x5d\xe9\xe4\x5e\xb0\x56\x9e\x92\x31\x26\xb3\x57\x2e\x0a\xf2\x73\x82\xf0\x0c\xd7\x9f\xd8\xef\xa7\xfc\x40\xe5\xf0\x9b\xa9\x9b\x42\x02\xdd\xf1\x83\xa0\xe0\x73\x4e\xc7\xd5\x0b\x62\x43\xc2\xc7\x2e\x11\x97\x73\x4d\x8b\xf9\x94\x4c\xd6\x84\x76\x79\xbf\x20\xb5\xab\xd4\x51\x22\xd0\xb0\x96\x60\x63\x64\x61\xec\xb6\xf5\x2b\x96\x04\x99\x03\x95\x47\xc4\xe1\xc7\x6b\x2e\xab\x66\xde\x60\xac\x67\x29\x30\x92\x96\x55\x31\x46\xa3\x6f\x25\x0f\xdb\x2f\xd6\x9f\x10\xef\x0b\x0e\xbf\x90\x49\x13\x9a\xf1\xc3\x3f\x06\xb7\xf9\xfe\xb7\x40\xd4\x6e\x01\x66\x8f\xa4\x08\x8e\x5b\x8c\xcb\x9f\xf0\xc9\xb6\xa0\x09\x09\x6a\x33\x15\x30\x08\xbb\xfd\xac\x4f\xfc\xd0\x38\x7d\x5b\x48\x07\xe3\x3b\x2a\x63\x6b\xd0\x7a\x03\x72\x20\x5a\xd6\xec\xa7\xcc\x9e\x30\x07\xe6\x25\x22\x07\x29\x4c\xa4\x09\x49\xba\x7e\x88\xdd\xad\x58\xd0\xfa\x3a\xf4\xf3\xa2\x12\xfe\x0b\x3b\x63\x9a\x7d\xe1\xf5\x36\xa2\x1c\xca\x8c\x27\xd5\xdf\x13\x2f\x56\x83\xf0\xbc\x0d\xba\xed\xa2\x02\x6c\x54\xc0\xa0\x09\x1f\xbe\xd8\x18\xbb\x44\xcb\x11\xad\x82\x53\xbc\xcc\x0e\x63\xe6\x41\x70\x27\x10\xb5\x3c\xda\x12\xfd\xab\x2d\xf9\x26\x71\xc7\xe4\xc0\x98\x70\xcb\xfe\xfd\x40\x59\xf6\xdb\x18\x1d\x30\xe1\x62\x4f\x14\xea\x8c\xbe\xee\x59\x80\x2b\x4d\xea\xc2\x0e\xa9\x6e\x32\xcd\xc7\x34\x25\x88\x8e\xf7\xbf\x66\x09\xbb\x3e\xd6\xd6\x6e\x87\xc3\x33\xf2\x66\x74\xeb\xd5\xd4\xb7\xc4\x72\xe8\x58\x18\xb0\x8c\x92\x87\x7a\x38\xe5\xe0\xd5\x8a\x3f\x37\x16\x7a\x35\x96\xf8\xd0\x09\x4f\x9a\x0d\x3a\x3b\x64\x13\x21\xda\x1e\xd3\xac\x7c\x66\xf4\x88\x1b\xc6\x28\x5d\x70\x69\x37\xbe\xae\x55\x56\xdb\x7f\x27\x80\x2b\x14\x4a\xd9\x50\x26\x14\xfb\x83\x14\xb4\x8e\xa1\xb3\x2e\x3f\x3f\xd0\x90\xb9\xfb\x66\xc6\xe3\x30\x83\x6e\xce\x08\x0b\x8a\x2f\xe8\xda\x95\xc2\x8d\xf5\x68\x42\x94\x6f\x3f\xca\x13\x67\x27\x05\xc0\x64\xa4\x4a\x11\x14\x5e\x69\xd2\x71\x89\xaf\x5b\xe2\x39\x8e\x47\x69\x0f\xee\x20\x33\x1b\xf7\xc6\x05\xd0\x8a\x91\x6e\x8b\x94\xd2\xb3\xa6\xb5\xd9\x4c\xad\x51\x77\x55\xad\x21\x7b\xb6\x26\x22\x03\x28\x1a\xd9\x19\xda\x0f\x12\x54\x7d\xba\xaf\x83\x48\x3c\x25\xbc\x90\x54\xa3\x74\xa1\x5b\x2e\x44\xfd\xc8\xa5\x29\xc6\x4d\x78\x6f\xcf\xe9\x3c\xf2\xd9\x3e\x7c\xab\x38\xf9\x6f\x3d\x2d\xed\xd5\x46\x07\xa0\xda\x1a\x19\xcd\x3c\x57\x5a\x88\x1d\x40\x87\xd1\x91\x6a\x5a\x3d\x96\x00\x23\xbb\x22\xaa\x33\x70\xf6\x85\xfc\xdd\x93\x4b\xd0\x44\xc1\xaf\x46\x8a\x89\x8b\x5b\x82\x95\x33\x84\x6f\xc1\x19\x50\x0e\x54\x66\x34\x5e\x0c\x9c\x53\x9b\x1b\xa9\x8c\x28\x26\xf7\x3c\x13\xe8\xa1\xa6\xcc\xbd\x07\xef\x56\x65\x3a\x26\x9f\xd8\xfc\x0b\x4a\x49\x2c\x8b\xe7\x9b\xa1\x90\x7d\xd1\x93\x9c\xbe\x53\x3e\x12\x3e\x0b\xd8\xcc\x2d\xce\x05\xfa\xb3\xc2\xc1\xb6\x02\x7c\x6f\x38\xa7\x81\x30\x2b\x75\xe4\xcf\xa8\xb6\x42\x6a\xd1\xa7\xd2\xe9\xad\x3f\xa6\x45\xea\x6d\x79\x3c\xdf\x67\x20\x7e\x3c\x4b\xec\x55\xb2\x21\xbe\x11\x40\x63\xe2\xb9\x59\xa6\x3d\xc9\xf4\xf7\xd0\xdc\x66\x38\xdc\xbb\xcf\x60\xbb\x91\x6a\x38\x0c\xe4\xa6\x2c\x10\x24\xd9\xe0\x36\xd8\x5b\x9a\x3f\x47\x7b\xd6\x97\xa7\x46\xcf\x64\xb0\x47\x58\x65\x70\x07\x50\xa3\x82\xbd\x64\x78\x9e\x8d\x91\x76\x1e\x6c\xe3\xd6\xd4\x26\x14\x89\x98\xfd\x7d\x9a\x45\x27\x28\xca\x67\xe0\xfd\xbe\xb7\x03\x0c\x19\x22\x5d\x64\x0f\x3c\x30\xb9\x55\xfc\x34\xcc\x8d\x8e\x6a\x04\xb0\x8a\x7c\xbb\x51\xd0\x97\xcb\x4d\x1f\x54\xcf\x28\x35\x8c\xee\x09\xa3\xfc\xc8\x8b\xce\x24\x89\x8a\x79\xc7\xd0\x34\xa3\x04\xcd\x58\x19\xec\x7d\xc6\x79\xb2\x9c\x21\x47\x1a\x0b\x52\x10\xfd\x89\x01\xea\x98\x67\x1d\x43\x35\xa9\xbd\xc8\x99\xd6\xf7\x63\xee\x77\xd4\x7e\xbf\x44\xd3\xc0\xd6\x46\x9e\x40\x01\x43\xf8\xf7\x78\x8e\x78\x71\x15\x4d\xbd\xd7\xdb\x64\x47\xe8\x60\x85\x3b\xcd\x70\x74\x5f\x01\xe9\x6e\xca\xfc\x55\xbd\x3a\x07\xc7\x1b\xe6\xc7\x18\x92\x3d\x07\xd3\xbd\x42\xfd\xa8\x2b\xd8\x6e\xdd\xd2\x23\x19\x65\xfe\x45\x17\xf8\xeb\xb0\x68\x09\xff\xa7\xf3\xbf\x01\x00\x00\xff\xff\x2c\x8e\x5a\x0b\xbc\x05\x00\x00")

func templateDh4096PemTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDh4096PemTmpl,
		"template/dh4096.pem.tmpl",
	)
}

func templateDh4096PemTmpl() (*asset, error) {
	bytes, err := templateDh4096PemTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dh4096.pem.tmpl", size: 1468, mode: os.FileMode(420), modTime: time.Unix(1500620674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateIptablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templateIptablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateIptablesTmpl,
		"template/iptables.tmpl",
	)
}

func templateIptablesTmpl() (*asset, error) {
	bytes, err := templateIptablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/iptables.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500620674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServerConfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x7a\x5d\x73\xdb\xb8\x92\xf6\x3d\x7f\x45\x97\x74\x61\xbb\x4a\xa2\x65\x25\x99\x93\x8c\xdf\x77\xb7\x34\xb6\x32\x51\x4d\x22\x6b\x63\x79\x3e\xaa\xe6\x06\x22\x5b\x22\x4a\x24\xc0\x01\x40\x29\x3a\xa7\xce\x7f\xdf\xea\x06\x40\x52\xb6\x33\xbb\x3b\x53\xae\x48\x64\x03\xe8\xef\x7e\xba\xa1\xdb\x5a\x1b\x07\x37\x37\x1f\xde\x26\xfc\xe9\x5f\xff\x82\x74\x45\x1f\xfe\xfd\xef\x24\x19\xc2\xfa\x6e\x05\xda\xc0\xd3\xfd\x0a\x2c\x9a\x03\x9a\xff\x4c\x6e\x6b\xa3\x9d\x06\x97\xd5\x89\xff\xd4\xe4\x35\x91\x0e\x72\x3c\x80\x6b\xd4\x00\x8e\xb2\x2c\x21\x33\x28\x1c\x82\x00\xa3\x1b\x87\x39\x2c\x56\xf4\x52\x61\x39\x6a\x69\x45\xfd\x8c\x56\x01\xba\x02\x8d\x42\x17\x68\xd3\x64\x08\x4f\x16\x5b\xfa\xc9\x00\xe4\x16\x4e\xba\x01\x61\xb0\x23\xde\x18\x99\xef\xa4\xda\x25\x43\x10\x2a\x87\x42\x1c\x10\x6a\x83\x7e\xdb\x1c\x04\x2f\x85\x83\x34\xae\x11\x25\x48\xe5\xd0\x6c\x45\x86\x81\x9c\x57\x63\x0e\xd2\xc1\x51\xba\x82\xb6\x37\xdd\xde\x2d\x35\xf1\xb2\xf0\x87\x1f\x85\x72\xe0\x34\x64\x5a\x39\xa3\x4b\x10\x59\x86\xd6\x42\xad\x4b\x99\x49\xb4\xc9\x10\xf4\x01\x0d\xb8\x02\xe1\xd7\xd5\x72\xc4\x6b\xaa\xc6\xba\x28\xe8\x56\x1a\x3c\x8a\xb2\x4c\x86\x60\x9a\x12\x2d\x6c\xb5\xa7\xa6\xbf\xf5\xd3\xf2\x7a\x3d\x5b\x9d\x1f\xfc\xa0\x40\x69\x35\xfe\x4d\xaa\x5c\x1f\x2d\xd8\x93\x75\x58\x59\xbf\x73\x26\x14\xec\xe4\xc1\x8b\x03\xf8\xad\x26\x2e\x1c\x34\x4a\x3a\x50\x4d\xb5\x41\x33\x02\xdb\x64\x05\x08\x4b\x6a\x9d\x84\xfd\xc2\x5e\x23\x68\x82\x82\xc7\x4a\xe7\x38\x08\xbc\x48\x1b\xc8\x2a\x6d\x5d\x77\x5e\x10\xc9\x9b\x4d\x69\x07\xdb\x46\x65\x4e\x6a\x95\x0c\xa1\x51\x25\x69\x81\x58\xaa\x85\x71\x52\x94\xe5\x89\x9c\x67\xdb\xd0\x87\x5c\x5a\xb1\x29\x89\x49\xda\x23\x6a\xa0\x95\xfc\x15\xa9\x6f\x83\xd1\x93\xe0\x58\xe4\x64\x51\x01\x0a\x31\xb7\x7e\xe1\x6c\x45\x6a\x79\x33\x05\x91\x8b\xda\xa1\x01\x25\x2a\x3a\x66\x6b\x74\xc5\x14\x4b\x74\x47\x6d\xf6\x70\xa7\x95\x42\x66\xd6\x42\x2d\x14\x96\xc1\x97\x92\xa1\xf7\x98\x4a\x1b\xb2\x80\x50\xa0\x15\xa6\x40\xc2\xff\xbe\x82\xc7\xd5\x94\x84\x28\xe4\xae\x40\x43\xbe\xcb\xc6\x14\x27\x66\x81\x9c\xc0\x62\x49\xbb\x1e\xb0\x13\x92\x8e\xed\x31\xfb\x52\xd8\xd9\x2a\x72\x4b\x5a\x5e\xbe\xb4\x2c\x34\xb6\x61\xfd\xe5\x5a\x5d\xb8\x70\x16\x1b\xe5\x36\x5a\x0a\xbe\x9c\xd6\x82\x23\xef\xf1\xf1\xf3\xf5\xfa\xf3\x23\x18\xad\x1d\x64\x68\x9c\xdc\xca\x8c\xfc\xec\x32\x13\x57\xa3\xfe\x93\x64\x08\x97\xf4\xf5\x6a\xc4\x9e\x5f\x1b\x79\x20\xba\x3d\x9e\xe0\x72\x8f\xa7\xab\x14\x60\x2e\xb2\x02\xb2\x52\xa2\x72\x21\x3e\x88\x63\x1f\xfc\xde\x89\x59\x59\xae\x40\x69\x40\x1f\x15\x6f\x4f\x74\xc9\x90\xf7\xd9\xca\x92\x94\xb7\xee\x16\xd1\x1e\x24\xbd\xdf\xd4\xb2\xef\x90\xbb\x58\xef\xef\x56\x54\x08\x99\xf0\x0b\x93\x21\xc9\x83\xfe\xcd\x00\x85\x3d\x8d\x8d\x15\x03\xc8\xa5\xc1\xcc\x69\x73\x62\x1d\x0a\xda\x3a\x04\xda\x16\x6c\x66\x64\xed\x7c\x10\xed\x50\xa1\x11\x4e\xaa\x1d\x7c\x7d\x9c\xf5\x45\xb7\x41\x9a\x9e\xcc\x36\x05\xf8\x8a\x15\x52\x88\x90\x25\x1b\xcb\x31\x44\x91\xf3\x57\x83\x70\xa7\xab\x4a\x2b\x58\x12\x7f\xd1\x72\x5e\xa4\xb0\x15\x92\xaa\xf4\x96\x5f\x78\xe1\xce\x0e\xf4\xc2\xcc\xd4\x09\x7e\x7f\x37\xf9\xc0\xca\xa9\x84\x12\x3b\xac\x88\xd2\x1b\x9a\x83\x77\x83\x74\x74\xce\x01\x57\xa3\xa2\xf8\xa2\xc7\xa2\xb4\xcc\x13\x08\x58\xfd\x72\xf7\x08\xc3\x9b\x29\xf1\x51\x09\x47\x49\x2d\xea\x9a\x4c\x6a\x11\x61\x50\xef\x33\x7b\x33\x8d\xaa\x92\x07\x04\xa9\xe8\x40\xa8\xc5\x0e\xaf\xd2\xe4\x36\x13\x10\x15\x7a\x4d\xd2\x5f\x67\x22\xcd\x8c\x4b\x6e\xd9\x82\xe7\xaf\xbc\x9c\xfe\x35\x9d\xf4\xea\x5b\x7a\x01\x43\x58\x17\xd2\x32\x2b\x60\x0b\xdd\x94\x39\xc9\xb3\xc7\xda\x81\xa5\x0c\xec\x92\x24\x13\x5c\x56\xee\x66\x77\x68\xdc\x4a\xb8\x82\x8a\x0b\x1f\xca\x8f\x7b\x0f\x69\x47\x7a\xf6\x0b\x9e\xe2\xa3\x64\x08\xf7\x72\xbb\x95\x08\x05\x96\xa5\x97\xc7\x88\x0a\x1d\x1a\x4e\x51\x3f\x7b\x8b\xa3\x4f\xdb\xe4\x90\x94\xc4\x7f\x4c\x86\x00\xa0\x6b\x54\xd6\x96\x90\x17\xbc\x06\xc6\xba\x71\x90\x17\x37\x93\xe9\xdb\xb4\xc6\x0a\xe8\x03\xf9\x5b\xb3\xb1\x4e\xba\xc6\x21\x4c\x27\x6f\xdf\xb3\xb1\xe9\x55\xbf\xd6\x34\xd6\xd7\x17\x26\xd8\x48\xe7\xfd\x27\x19\xe6\x45\x6f\xc3\xe4\x36\x2f\x9e\xa9\x2a\x2f\x68\x05\xbf\xcc\x0b\x96\xed\xfe\xd3\x8a\x98\xb1\x3d\x01\x63\x86\x72\xba\xd6\xa5\xde\x9d\x88\xa7\x56\x95\xb6\xd9\x50\x1d\xba\x14\x79\x6e\xd0\x12\x1b\x70\x90\x02\x16\xab\xab\x2e\xe7\xc6\xec\x11\x43\xec\x30\x4d\x27\xe9\x07\x76\xd2\x52\x1f\xd1\x84\x98\xd5\xc9\xd0\xef\x58\x53\xad\xc7\x1c\x2e\x5d\x81\x0a\x14\xba\x37\x93\x11\xc8\x14\x53\x10\x70\xfd\x66\x02\x35\x9a\xb0\x17\x1d\x72\x8f\x5b\xd1\x94\xce\x52\x8c\x30\x2d\x5c\x52\xea\x37\x98\xe9\xaa\x42\x95\x63\x7e\x95\x44\xd6\x03\xbb\x24\xd5\x9d\x56\x5b\xb9\x6b\x4c\x97\x3d\x28\x6b\x11\x4f\xc4\x40\x79\x02\xc1\xa5\x24\x2c\x18\xb2\xda\xa3\xff\x3b\x0d\xb9\x11\xc7\x18\x56\x41\x76\xaa\x94\x46\x57\x64\xf6\x5e\x7e\xe1\x5a\xe4\xc4\x1e\xe1\x66\x92\xbe\x4f\x27\xe9\x0d\x6f\x25\x9d\xc5\x72\x3b\x0a\x05\xc7\xa0\x75\x9e\x72\x83\x50\x09\x62\xe4\x20\x64\xe9\xb3\xb5\x8e\x8a\xa3\x9d\x7b\x09\xb0\x5d\x10\xc9\x0c\x87\xfc\x59\x22\xd0\xaa\x3d\x36\xe5\x94\x41\xeb\x28\x55\x43\x29\x15\x02\x79\x5c\xe7\x46\xc9\xf0\x25\x68\x49\xdb\x7c\x17\x83\x95\xd9\xe7\x6a\x24\xd5\x56\xa7\xc9\x6d\x10\x34\x9c\x33\x81\xe9\xbb\x77\x69\xfc\x9b\x24\xe1\x2d\xf9\xd6\x12\x09\xb8\xf1\xc7\x2f\xc2\xee\x83\x7b\x7d\x11\x52\x39\x21\x15\x81\x31\xcc\xb4\xc9\x29\x69\x05\x09\xff\xdf\xf8\x3f\x5a\x60\xb4\x58\x45\x45\x53\x82\xb3\x56\x67\x52\xf8\x72\x29\x95\x17\x29\x24\xf7\xc5\xb6\x35\xd4\x4e\xa3\x85\x9c\xc2\x4e\x93\x36\xa4\x65\x4d\x0b\xf2\xae\x11\x9f\xe6\x6b\xae\xda\xb5\xbe\x19\x32\x9e\xb0\x56\xee\x14\xe6\xc1\x3e\x5c\x05\x5e\x32\xd2\x55\xf1\x5a\xeb\x92\xaa\xb3\x83\xa3\x20\xfe\x6a\x83\x07\xa9\x1b\x4b\x7e\x14\xb6\x4a\x13\xb9\xcd\xd8\xe9\xc6\x44\x3d\xae\xd1\x58\x69\x1d\xc8\xba\x4e\xdd\xb7\xbf\xf1\x49\xd2\xf7\x4b\xbb\x24\x43\xf8\x23\x02\xb7\xad\x34\xd6\x71\x32\xe6\x34\xf3\xf0\x78\x61\x5b\x42\xc8\x44\x2d\x36\xb2\x94\x8e\x02\xd7\xe9\x00\x28\xdb\x4a\xdf\x42\x1a\x0f\x2f\xe9\x71\x3c\x8c\x62\x7f\x71\xd7\x03\x3d\x5c\x38\x55\x07\x18\x2b\xa1\x3c\x0e\xb0\x84\x89\x19\x55\x2c\x56\xd7\x0a\x5d\x45\xe6\xd5\x8a\x77\x0b\xe7\xb5\xbb\x8c\xa0\x40\x83\x70\x44\x6f\xc6\xa6\x6a\x23\xe3\xed\xf5\x99\xeb\xa4\x00\x1f\xa5\xe2\xfd\x99\x98\x8f\xa4\x93\x84\x95\x1c\xaa\x64\x09\x23\x14\x6f\xee\x3d\xa0\x8d\xd6\x4b\xb6\xf2\xff\x0f\x1b\xbf\x9b\x00\xaa\x3c\x7e\xbb\x99\x4c\xae\x48\x11\xa2\x2c\x75\x80\x1d\x1e\x2d\x3f\xf3\x85\x14\xe0\x33\x7a\x34\x11\xe3\xc5\xa7\x14\xc7\x7e\x41\xb1\xd3\x03\x95\xaf\x42\xfe\x36\x3a\xc6\x41\x0b\x51\xd2\xf3\x20\x81\x8e\xcf\x8e\xc7\xff\xa3\x43\x30\x66\x21\xee\x05\xdc\x7f\xba\x5b\x8d\x6b\xa3\xbf\x9d\x46\x70\x64\x65\x47\xef\x76\xa2\xdc\x7b\x71\xc9\x32\x31\x4a\x02\x8b\xac\x55\x5a\xdb\xa5\x0f\x4e\x2a\x19\xca\x16\x52\xf5\x7c\x3f\xa8\xcf\xa3\x6b\xca\x9b\xf7\xcb\xc7\x16\x54\xc5\x8c\x98\xc2\x2b\x5e\xea\x61\xea\xf7\xfd\xf4\xa5\x97\x52\xec\x7e\xdf\x4f\x9f\x79\x29\x63\x56\x87\x3f\x7a\xbb\xb1\xc6\xb4\x22\x27\xd2\x66\x6f\xc9\x2b\xa3\x36\x2e\x43\xdf\xd1\x81\xe1\xab\xa8\xb0\x0e\x34\x79\xb5\xf4\x30\x31\x48\x5a\xb0\xd1\x8d\x62\x80\xed\xd5\x1d\x88\x9f\xdb\x9b\x6c\xb8\x6a\x6c\xe1\xdb\x4c\x1b\x15\x1f\xb2\x5b\xf0\xc1\x23\x48\x17\x75\xcd\x98\x8d\xc4\x6a\x91\xa0\x77\x69\x0b\x1b\x2c\xa4\x6a\xf3\x91\x87\x38\x7d\x80\x48\xb9\xc7\x15\xc8\xda\x7d\xbe\x96\x0b\x05\x03\x36\x82\xea\xfe\xac\xbd\xd2\x47\x3e\x93\x38\x3b\x73\x87\x0e\x5e\x07\x4b\x73\x72\xbb\x8c\xf9\xfd\x3c\x48\xa9\x02\x6f\x44\xb6\x7f\xdd\xa7\xd2\x64\xe8\xf7\xbf\xf9\x30\x4d\x6f\x7e\x78\x9f\x7e\x78\x51\x20\xa2\xc7\x4f\x5f\x90\xde\x7c\x8f\xf4\xdd\x0b\xd2\xe9\xf7\x48\xdf\xbc\x20\x7d\xf3\x3d\xd2\xb7\xc9\xb0\x26\x53\x0d\xc2\x82\x7f\xd0\x02\x0a\xc4\xe7\x0b\x06\xcf\x08\xc3\xce\x3f\xbc\x46\x08\x6b\x1d\x0a\x00\xd8\x1a\x33\x02\xdf\xbd\x18\xf2\x1e\x11\x5f\x24\xc3\xd6\x33\x09\x20\x6c\x41\xbc\x4c\x4a\x50\x08\x0b\x22\x1a\x38\x19\x46\xfc\xe5\xbd\x03\xa4\xf3\x8e\x10\xa0\x2e\x9b\x9c\xc1\x15\x99\xc4\xcf\x01\x46\xfd\xe6\xa6\xd9\x74\xad\xcb\x20\xcb\x72\xdf\x5f\x47\xc7\xef\xf1\x15\xf2\x10\x87\x3b\xd7\x59\xeb\x71\xfd\xeb\xa0\xe0\x2a\x25\xc7\x9f\xff\x3e\xfb\xb2\xfa\x3c\xff\x11\x1e\x09\xd1\xd9\x7e\x50\xf9\xa6\x96\xc4\xe2\x67\xbd\xa6\x30\xf3\x6d\x0d\x75\xc9\x30\x58\x17\x58\x6a\x45\x75\x94\x54\x19\xa4\x21\xf9\x6d\x45\x2d\xdb\xb9\xec\x14\xec\x9d\xbe\xa8\x5e\x88\xac\x90\x0a\xbb\xf1\x42\xb4\xd4\xdb\x49\x7a\x33\x7d\x7f\xe6\xc7\xd3\xb7\xef\x29\x6f\x7c\xa4\x14\x35\x82\x46\x85\x44\xcf\x49\x9e\xa3\x8a\xf3\xbf\xfd\x31\x19\x06\xe5\x84\x4a\x9e\x4b\x03\x59\x96\xff\xcf\x6e\xee\x41\xa1\xea\x06\x4f\xdc\x92\x64\x59\x7e\xdd\x09\x19\x33\x5b\xa8\x36\xbe\x4b\x90\xe7\x3b\x7b\xde\xe1\x19\xef\x49\xe8\x73\x42\xa0\x53\x4e\xe9\xb6\xbd\x78\x96\x0f\x3c\xd2\x0e\x53\xa1\x30\x32\xe1\xd2\x2e\x2d\xe0\x37\x51\xd5\x25\xfa\x8d\xda\xac\x49\xe9\xb7\x6b\x36\x88\x21\xa9\x76\x23\x9e\xb0\xc4\xf4\x1d\x00\x7a\x87\x24\x7d\x31\xea\xc6\x6e\x54\x21\x06\x3e\x2b\xf4\xba\x40\xfb\xba\xa7\xf4\xc7\x58\x61\x78\xd4\x53\x13\x29\xef\x1b\xe6\xec\xd4\xbd\x82\xa4\xb7\x14\xca\x1f\x18\xeb\x46\x5b\xfe\x9d\x29\x6f\x5f\x37\xe5\xcb\xa7\xdc\x07\xde\xdd\xc7\x96\x28\x58\x52\xe4\x79\x0f\x19\x10\x82\x38\x33\x66\xb0\x5e\x0b\xf9\x28\x63\x44\xf6\xe2\x87\x29\xcf\x47\xda\xe8\x10\xee\x4c\x70\x54\x0c\xec\x73\xb9\xdd\xa2\xf1\x41\xd3\xce\x6a\x9e\xcd\xf4\x38\xfc\x5a\x42\xd8\x19\xdd\xd4\x61\xfe\xd0\x81\x99\x35\x57\x36\xb2\xa0\x3b\x6a\xa8\xd0\x15\x3a\x67\x36\x2f\x6f\xae\xe0\x6b\xa3\xa0\x6a\x4a\x27\xc9\xfa\x31\x89\xe7\x02\x2b\xad\xec\x08\xb4\x0a\xa8\x43\x64\x05\xcb\x05\xfe\x0c\x3f\xa8\x69\xb9\x7a\x75\x54\x16\xe8\xe3\x72\xbf\xf0\xda\x6f\x0d\xa2\xae\x8d\xae\x8d\x14\x0e\xcb\x13\x59\xed\x72\x7a\x05\x97\xb3\xfc\x20\x54\x86\xf9\x15\xdc\xc5\x70\xf1\x63\x14\xee\xbc\x4e\x4a\x54\x32\x23\x5c\x18\xb6\xae\x74\x2e\xb7\xa7\xf3\xc9\x9d\x54\x04\xf5\x6b\xad\x2c\xdb\xc6\xeb\x2b\xb2\x42\xa8\xbd\xd3\x56\xa7\xa1\x47\x9f\xd1\x02\xd9\xcb\xbc\x46\xe0\xa1\x44\x61\xd4\x38\xfa\x9c\x67\x2b\x4d\x6e\xcf\x1f\xa7\xd7\xfe\x45\xe2\xa7\xb2\xde\x92\xf9\xc8\xfb\x4b\x37\x02\xf1\xe3\xe5\x88\xf1\x38\xc5\x75\x83\x28\xc6\x03\x9e\x36\x80\xaf\xdc\x77\xba\xc9\x90\xfa\x5c\x6e\xc9\x77\xc2\xe1\x51\x90\xe8\x46\x37\xbb\xa2\x9b\xe9\x66\x22\x8e\x04\x68\xcb\xc5\x0a\x9c\x11\x5b\x2a\x3e\x31\x17\x1e\x71\x03\x1b\xa3\x8f\x1e\x32\x32\xb0\x88\x18\xae\xd4\x7a\xdf\xd4\xcc\xc0\x4e\x3f\xdf\x9a\x4c\xb4\x7e\x51\xe7\x63\xae\x3d\x1b\x3d\x2e\x67\x6b\x72\x41\x73\x86\xe5\x9e\x7b\x47\xc4\x0d\xfc\xc0\x63\x77\x49\xdd\x5a\x8e\xa6\x9d\xf5\x12\x0d\x8b\x4b\xbe\x82\xa6\x3c\x5d\xa5\xc9\x6d\x28\xc1\x41\x43\xe3\xa8\x89\x1c\xb7\x37\xb0\x39\xd5\xc2\xda\x71\x5e\x64\xf5\x20\xf9\x5f\x13\x12\xde\x46\xc3\xad\x68\x80\x83\x6d\x09\x6c\x15\x6e\xd1\x51\xee\x23\x4f\x0a\x9d\x22\x6d\xef\xe5\x0d\x86\xeb\xea\xcd\xfd\xf2\xd1\x2b\xe0\xb7\xc5\xeb\xd0\xf8\x6e\xf6\xeb\x7c\xb6\xa6\x10\x2c\x9c\xab\x7f\xbc\xbe\xd6\x35\xaa\x43\xad\x52\x85\xee\x7a\x2b\xfe\x4a\x0b\x57\x95\x43\xe2\x2e\x13\x07\x14\xce\x86\xd1\x42\x07\x1f\x36\x48\xb9\xde\xe0\xd6\xcf\x08\xb9\x15\x6d\x36\x25\x17\xed\x0e\x8f\x5b\xd2\xdc\x41\xe6\x98\xc3\xe6\xc4\x73\xa7\x5c\xd9\x34\xd3\x55\xab\x47\x3a\x63\xac\x6b\x2e\xef\xb4\x6e\x3a\x79\x9f\xfe\xf0\x8f\x74\x3a\x9d\xd2\x5f\x54\xe2\x73\xaa\xf7\x29\xff\xcf\xaa\x7b\x6a\x13\xed\x33\x27\x6f\x51\x6e\x3f\x91\xf5\x9c\xbc\x37\xc0\x18\x58\xc4\x01\x74\x20\x98\x12\xc2\x4f\xa7\xe8\xf7\xa3\xb3\x19\xad\xaf\x4e\x36\x0c\x27\x5a\xb8\x49\x80\x6b\xab\x4d\x86\xfd\x23\x5e\x21\x1d\x85\xd9\xfa\x39\x34\x66\x66\xfb\x29\xe9\x2c\xb7\x11\xdc\xe2\xc5\x17\xf6\xb5\x1b\x81\x50\x38\x9c\x1e\x07\x90\xf3\x77\x5a\x91\xdb\x2e\xdd\x06\x4e\x09\xb2\xc8\x5d\xe1\x22\x8a\xe9\x1a\x1d\x3f\x84\xee\x50\xd2\xf5\x1e\x4f\x5c\x0d\x08\x87\x11\x60\xeb\x40\x93\x8d\x95\x9c\x67\x1d\xed\x08\x8c\x47\x41\xa5\x9f\x4f\x3b\xb4\x8c\x28\xeb\xc6\x50\xe1\xa1\x15\x1f\x35\x35\x1c\x3a\x6f\xf8\x02\x82\xf0\x21\xc1\x44\xec\xcd\x9a\x02\xa2\x64\x30\x29\x09\xa1\x86\xd9\xfa\x39\x47\xb5\x90\xc6\x0f\x96\x17\x1f\xe1\x8f\x87\x27\xf8\x34\xfb\x75\x0e\xcb\x87\x35\xfc\x3c\x5f\xce\xbf\xce\xd6\xf3\x7b\x58\x2c\xef\x17\xbf\x2e\xee\x9f\x66\x9f\x29\xe0\xe6\x5f\xd7\x8b\x8f\x8b\xbb\xd9\x7a\x7e\xfd\xcb\xfc\x0f\x58\xcd\x16\x5f\x1f\xe1\xe3\xc3\x57\x98\xcf\xee\x3e\xc1\xdd\xe7\xc5\x7c\xb9\x26\x5e\xf8\xeb\xa7\xd9\xaf\x8b\xe5\xcf\xb0\x58\x3f\xc2\xc3\x6f\x4b\x78\x5a\x2e\xfe\xeb\x69\x0e\x83\xbb\x87\x2f\x5f\x1e\x96\xb0\x9c\x7d\x99\x0f\x88\xf6\x69\x49\x4f\xe6\xcb\x35\xac\x3f\x2d\x1e\xe1\xf3\x62\x39\x87\x87\xa7\x75\x9a\xdc\xe6\x4d\x5d\x32\xbf\xe3\x8c\x2f\x6c\x28\x98\xf6\x88\xb5\x28\xc9\x26\x9d\x75\x28\x7d\xa2\x85\x5a\xaa\xdd\xb8\x94\x7b\x9e\x3e\xa0\xb5\x62\x87\xd1\x65\x2d\x29\x85\x1b\x1f\xae\x80\xda\xb8\x82\xaf\xd5\x42\x83\x56\x4a\xb5\x07\xab\x7d\x51\x67\x3d\x72\x1b\x49\x4d\x97\xa5\x16\x53\x05\x3a\xdf\xeb\xf1\x3b\x42\xb6\x3b\x2a\xb4\xb9\x3e\x2a\xf2\xe4\x15\x19\x09\x0f\x68\x4e\x70\x33\x01\x8b\x99\x56\xb9\x1d\xc5\x99\x09\xef\x6c\xb0\xd2\xdc\x06\xd4\xc8\x8d\xa9\x9f\x75\xc9\x2d\x28\xcd\xcc\xc7\xee\x3d\x87\xbc\x31\xa1\x1e\xc0\xcd\x34\xee\x06\x4e\x56\x08\x35\x1a\xa9\xf3\x34\xe9\x14\x71\x33\x21\x22\x52\x10\x39\x06\x7e\x73\x46\xd0\x8a\xc6\x50\x73\xbe\xc1\x13\x2f\xa5\xf3\x63\x5a\xa1\x26\xf0\x14\x6f\x7a\x46\xbd\x1b\xd3\xc1\xa7\x2f\xb3\xbb\x36\x88\x06\xbe\xf5\x2c\xb0\xac\x61\x53\xea\x6c\x0f\xf7\xfa\x11\x84\x73\x22\xdb\x5b\x56\xe4\xd3\xfd\x0a\xf8\xa6\x77\x5b\x6a\x9d\xfb\x39\x57\x7f\x8c\x7e\x3e\x3d\x3f\xd4\x0a\xc6\xe3\x1d\xaa\x3d\x9e\x60\x3c\xf6\x13\x7d\x70\x22\x65\x6f\x3c\x9f\xc3\xb6\x57\x22\xc1\xa1\xdb\xcb\x22\xd6\x49\xa6\xeb\x93\xbf\x2c\x91\x16\xf6\x78\xea\x86\xb8\xac\xa7\x76\xa8\xdf\xbb\x44\xb8\x98\x5c\xf8\x01\xab\x3b\x3f\xe4\xe2\xe6\x22\x3e\x6d\xe7\xb6\xb7\xae\xb4\x63\xd1\x50\x38\x33\x73\x30\x39\xbb\x99\x90\xb6\xbd\x8d\x18\xc2\x23\xdf\xd8\x11\x4f\xe6\x54\x3b\xbd\x33\xa2\x2e\x64\x06\x99\xac\x43\x46\x5c\x87\x4e\x67\x2b\x77\x20\x1d\x56\x5e\x94\x0d\xf5\x4e\xb5\xe4\x1c\x16\x9c\x2b\xde\xfa\x78\x52\x3e\x89\x2b\x7f\x59\xa6\xc9\xad\xdf\x0f\x7e\xfa\x38\xbe\xfb\xe9\x0e\xc2\x7f\x43\xf8\xa9\xd4\xc7\xad\xb4\x05\x5c\x86\xac\x7b\xd5\x92\xce\xe6\x8f\xe3\x9b\xe9\xfb\x40\x3f\xa4\xef\xed\xbb\xfb\xf9\xe3\x78\x7e\x3f\x7f\xe3\x5f\x0e\x61\x6d\x28\xb3\x8d\xef\xe7\x8f\x8c\xef\x3d\x92\xcd\x74\x55\xf3\x25\x81\x56\x51\x43\x04\x21\x28\x56\x7a\xd7\xd7\x01\xf6\x4a\xc7\x73\xc2\xde\xf5\x34\x65\x69\xca\x4a\xed\x7b\xa9\xbe\x23\x66\x9a\xd0\x51\xe3\xf2\x9f\x3a\x06\x79\x25\xbe\xc9\xaa\xa9\xc2\x8d\x33\xe3\x62\xad\xb2\xc6\x50\x39\x2a\x4f\x31\xe3\xb2\x23\xb7\x45\x06\x5b\x24\xce\xf5\x2b\x4d\x6e\x2b\xf1\x6d\x1c\x5f\x87\x09\xdd\xc2\x5d\x50\x43\xb2\xd3\x3a\x07\x99\xa3\x08\xb0\xad\xc9\xce\x66\x2a\xc9\x30\x60\xe9\x0b\xcb\xcd\x98\x2c\x91\x52\x89\xd8\xf2\x3c\x49\x49\x27\x45\x29\xff\xc9\xdd\xb5\x77\xf8\x3f\xc2\xcd\x79\x73\x5e\x3f\xa8\x87\xe1\x79\xdb\x2b\xd7\xed\x69\xd2\x58\x34\xa0\xf4\x46\xe7\xa7\x84\x51\x76\xfc\x12\x94\x10\x27\xce\xbe\x82\x87\x32\xea\x0c\xcf\xdb\xc4\x41\xcb\xbc\x6d\x0b\x79\xe0\x10\xb0\x90\x41\xab\x1b\x93\x21\x8f\xce\xc2\xf8\x9c\x1d\x4c\x38\x0f\xf7\x34\x94\x5a\xed\xd0\x70\x25\xf7\xcb\xc9\x40\x1b\xe4\x2c\xea\xbb\x10\x06\x26\x51\x70\xce\x52\x3b\x23\x72\x4c\x93\xc0\xd3\x98\x22\x36\x7e\x0e\xb7\xe9\x0f\x8d\xab\x1b\x0a\x04\x5b\x50\x46\xb0\x4e\xb8\xa6\xbb\xca\x3b\xfa\x74\x16\x6c\xd8\x76\xfe\xdc\xae\x38\xd3\x28\xca\xf2\x11\xd5\x1a\x3c\x1a\xe9\x1c\xaa\x90\x4e\x2b\xa9\x1a\x87\x69\x12\xb6\x0c\xa9\x64\xec\xbf\xa6\xa5\xde\x25\xcf\x80\x47\xa9\x77\x5d\x01\x60\xb5\x11\x32\xf6\x78\xcb\x9e\x2c\xbd\xbe\xd4\xe1\xbe\xa5\xfd\xe5\x82\xdc\x82\x69\x94\x62\x80\x6d\xfd\xad\xf0\x41\x66\xc8\x3f\x53\x38\xf5\x76\x09\xd1\x3a\xf8\x73\x65\x28\xda\x2b\xf8\x48\x75\xfd\xcf\xe0\x3a\x7f\x96\x7a\xd7\xbb\x61\xbe\x8a\x3f\x3a\xa1\x33\xb5\xa1\x7f\xc6\xa2\x26\x44\xc7\x40\xe7\x80\xc6\x50\x31\xf1\x68\xc3\xb3\x4f\x2b\x06\xbc\x4b\x30\xb8\x57\x8e\xaf\x53\x3a\x24\x06\xad\x3a\x48\x4f\x16\x6e\x6a\xaa\xa4\xc7\x82\xde\x0d\xba\x43\xc2\x1e\xdd\x89\xd2\xa5\xc0\xfc\x68\x85\x1e\xec\x76\x65\xed\x72\xd3\x38\x3f\x24\xd0\xae\x20\xcc\x4e\xa7\xc5\xff\x22\xd4\x25\x6d\xdf\xf6\xa4\x38\x7b\xc1\xe9\x90\xdb\x9f\x3e\x2c\x83\x12\x0f\x58\x92\x5b\x11\x8d\xc7\x41\x70\x40\xb3\xd1\x56\xba\x93\x0f\xa0\x09\x27\x55\x59\xa2\x72\x23\xc0\x6f\x19\xd6\x8e\xc1\xcf\x56\x38\x51\x02\x1a\xa3\x0d\x01\xae\xb7\x1e\x27\x09\xab\x7d\x56\xe9\x6e\xe9\x4b\x68\xc8\xdc\xc9\x10\xde\xb1\x0f\xfd\xc0\xf1\xc8\xa5\x8b\x9a\x50\xdc\x34\xbb\x9e\xd3\x51\x25\xdc\x94\x58\xd1\x9e\x1f\x80\x07\x29\xce\x60\x45\x08\xd2\x33\x86\x09\xfd\x0b\x6f\x58\x24\x62\x2b\x43\x30\x58\xa3\xff\x35\x40\xf4\xad\x14\x60\xe6\xfc\x8f\x5a\xa6\x13\x86\x9b\x7f\x35\xa8\x28\x3b\x74\xee\x17\xa2\x89\x31\x61\x78\xc8\xdd\x88\xc3\x9d\x36\xa7\xf6\x52\x50\xfb\xe8\x09\x4e\x5a\xea\x1d\xe5\x2f\x7f\x89\x9c\xfc\x77\x00\x00\x00\xff\xff\x93\x7f\x67\xb6\x57\x25\x00\x00")

func templateServerConfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServerConfTmpl,
		"template/server.conf.tmpl",
	)
}

func templateServerConfTmpl() (*asset, error) {
	bytes, err := templateServerConfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/server.conf.tmpl", size: 9559, mode: os.FileMode(420), modTime: time.Unix(1500620674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/ccd.file.tmpl": templateCcdFileTmpl,
	"template/client.ovpn.tmpl": templateClientOvpnTmpl,
	"template/dh4096.pem.tmpl": templateDh4096PemTmpl,
	"template/iptables.tmpl": templateIptablesTmpl,
	"template/server.conf.tmpl": templateServerConfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"ccd.file.tmpl": &bintree{templateCcdFileTmpl, map[string]*bintree{}},
		"client.ovpn.tmpl": &bintree{templateClientOvpnTmpl, map[string]*bintree{}},
		"dh4096.pem.tmpl": &bintree{templateDh4096PemTmpl, map[string]*bintree{}},
		"iptables.tmpl": &bintree{templateIptablesTmpl, map[string]*bintree{}},
		"server.conf.tmpl": &bintree{templateServerConfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

